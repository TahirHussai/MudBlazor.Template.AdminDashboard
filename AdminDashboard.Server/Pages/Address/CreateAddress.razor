@page "/Address/create"
@using AdminDashboard.Server.DTO

@using System.ComponentModel.DataAnnotations
@using AdminDashboard.Server.Models
@using AdminDashboard.Server.Repository.Interface


@inject ICountryRepository  _countryRepo
@inject IAddressRepository  _addressRepo
@inject IRegionRepository  _regionRepo
@inject NavigationManager _navManager
@inject ISnackbar Snackbar

<MudTabs Elevation="1" Rounded="true" PanelClass="mt-6">
    <MudTabPanel Text="Address">
        <MudGrid>
            <MudItem xs="12" sm="12" md="12">
                <MudForm Model="@model" @ref="@form" ValidationDelay="0">
                     <fieldset class="fieldSet">
  <legend class="lengend">Add New Address</legend>
                    <MudCard>
                        
                        <MudCardContent>
                            <MudGrid>
                                <MudItem xs="6" md="6">
                                    <MudTextField T="string" @bind-Value="model.Address1" Label="Address 1" Margin="Margin.Normal"></MudTextField>
                                </MudItem>
                                <MudItem xs="6" md="6">
                                    <MudTextField T="string" @bind-Value="model.Address2" Label="Address 2" Margin="Margin.Normal"></MudTextField>
                                </MudItem>
                                 <MudItem xs="6" md="6">
                                    <MudTextField T="string" @bind-Value="model.City" Label="City" Margin="Margin.Normal"></MudTextField>
                                </MudItem>
                                <MudItem xs="6" md="6">
                                    <MudTextField T="string" @bind-Value="model.PostalCode" Label="Postal Code" Margin="Margin.Normal"></MudTextField>
                                </MudItem>
                                 <MudItem xs="6" md="6">
                                    <label for="Country">Country</label>
                                    <select @bind="model.CountryID" class="form-control" id="CountryId">
                                        <option value="">-- Select Country --</option>
                                        @if (countrylist != null)
                                        {
                                            foreach (var list in countrylist)
                                            {
                                                <option value="@list.ID">@list.CountryName </option>
                                            }
                                        }
                                    </select>
                                </MudItem>
                                 <MudItem xs="6" md="6">
                                    <label for="State">State</label>
                                    <select @bind="model.StateID" class="form-control" id="StateID">
                                        <option value="">-- Select Region --</option>
                                        @if (regionslist != null)
                                        {
                                            foreach (var list in regionslist)
                                            {
                                                <option value="@list.RegionID">@list.Desc </option>
                                            }
                                        }
                                    </select>
                                </MudItem>
                            </MudGrid>
                        </MudCardContent>
                        <MudCardActions Class="pb-4 pl-4">
                            <MudButton Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto" OnClick="@( () =>  Save())">Save</MudButton>
                            <MudButton Variant="Variant.Filled" Color="Color.Secondary" DisableElevation="true" OnClick="@(()=>form.Reset())" Class="mx-2">Reset</MudButton>
                            <MudButton Variant="Variant.Filled" DisableElevation="true" OnClick="@(()=> AddressList())">Cancel</MudButton>
                        </MudCardActions>
                    </MudCard>
                    </fieldset>
                </MudForm>
            </MudItem>
              <MudItem xs="12" sm="12" md="12">
                   <fieldset class="fieldSet">
  <legend class="lengend"> Address List</legend>
            <MudTable Elevation="25" Items="addressList" Filter="new Func<AddressDTO, bool>(Search)" @bind-model="model">
                <ToolBarContent>
                    
                                 <MudTextField @bind-Value="searchString" Placeholder="Search for Categories..." Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
                </ToolBarContent>
                <HeaderContent>
                    <MudTh>Id</MudTh>
                    <MudTh>Country</MudTh>
                    <MudTh>State</MudTh>
                    <MudTh>Address1</MudTh>
                    <MudTh>Address1</MudTh>
                    <MudTh>City</MudTh>
                    <MudTh>Actions</MudTh>
                </HeaderContent>
                <RowTemplate>
                    <MudTd DataLabel="Id">@context.AddressID</MudTd>
                    <MudTd DataLabel="Address1">@context.CountryName</MudTd>
                    <MudTd DataLabel="Address1">@context.StateName</MudTd>
                    <MudTd DataLabel="Address1">@context.Address1</MudTd>
                    <MudTd DataLabel="Address2">@context.Address2</MudTd>
                    <MudTd DataLabel="City">@context.City</MudTd>
                     <MudTd DataLabel="">
                        <MudFab @onclick="@(()=>Edit(@context.AddressID))" Color="Color.Primary" Icon="@Icons.Material.Filled.Edit" Size="Size.Small" IconSize="Size.Small" />
                        @*<MudFab @onclick="@(()=>Delete(@context.ID))" Color="Color.Secondary" Icon="@Icons.Material.Filled.Delete" Size="Size.Small" IconSize="Size.Small" />*@
                        </MudTd>
                </RowTemplate>
            </MudTable>
            </fieldset>
              </MudItem>
        </MudGrid>
    </MudTabPanel>

</MudTabs>

@code {
    MudForm form;
    private string searchString = "";
    AddressDTO model = new AddressDTO();
    List<AddressDTO> addressList = new List<AddressDTO>();
     List<RegionDTO> regionslist = new List<RegionDTO>();
     List<CountryDTO> countrylist = new List<CountryDTO>();
    protected override async Task OnInitializedAsync()
    {
        await AddressList();
        await RegList();
        await CountryList();
    }
    private async Task RegList()
    {
        regionslist = await _regionRepo.Get();
    }
     private async Task CountryList()
    {
        countrylist = await _countryRepo.Get();
    }
    private async Task AddressList()
    {
        addressList = await _addressRepo.Get();
    }
    private bool Search(AddressDTO cat)
    {

        if (string.IsNullOrWhiteSpace(searchString)) return true;
        if (cat.Address1.Contains(searchString, StringComparison.OrdinalIgnoreCase)
            || cat.Address1.Contains(searchString, StringComparison.OrdinalIgnoreCase)
            || cat.City.Contains(searchString, StringComparison.OrdinalIgnoreCase)
            || cat.CountryName.Contains(searchString, StringComparison.OrdinalIgnoreCase)
            || cat.StateName.Contains(searchString, StringComparison.OrdinalIgnoreCase)
        )
        {
            return true;
        }
        return false;

    }
    bool isField = false;
    private async Task Save()
    {
        ResponseModel  responseModel = new ResponseModel();
        if(model.AddressID>0)
        {
            responseModel = await _addressRepo.Upate(model);
            if (responseModel.IsSuccess == true)
            {
                Snackbar.Add("Operation Performed Successfully!.", MudBlazor.Severity.Success);
               addressList = new List<AddressDTO>();
                 await AddressList();
            }
            else
            {
                await AddressList();
                isField = true;
                Snackbar.Add("Something went wrong!.", MudBlazor.Severity.Warning);


            }
        }
        else
        {
            
       
        responseModel = await _addressRepo.Add(model);
        if (responseModel.IsSuccess == true)
        {
            Snackbar.Add("Operation Performed Successfully!.", MudBlazor.Severity.Success);
            addressList = new List<AddressDTO>();
             await AddressList();
        }
        else
        {
             await AddressList();
            isField = true;
            Snackbar.Add("Something went wrong!.", MudBlazor.Severity.Warning);


        }
         }
    }
    private async Task Edit(int id)
    {
        model = await _addressRepo.GetById(id);
    }
    private void Delete(int id)
    {
        //customerService.DeleteCustomer(id);
        //snackBar.Add("Customer Deleted.", Severity.Success);
        //GetCustomers();
    }
    



} 