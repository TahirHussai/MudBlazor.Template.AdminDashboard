@page "/Category/create"
@using AdminDashboard.Server.DTO

@using System.ComponentModel.DataAnnotations
@using AdminDashboard.Server.Models
@using AdminDashboard.Server.Repository.Interface


@inject ICategoryRepository _catRepo
@inject NavigationManager _navManager
@inject ISnackbar Snackbar

<MudTabs Elevation="1" Rounded="true" PanelClass="mt-6">
    <MudTabPanel Text="Category">
        <MudGrid>
            <MudItem xs="12" sm="12" md="12">
                <MudForm Model="@model" @ref="@form" ValidationDelay="0">
                    <MudCard>
                        <MudCardHeader>
                            <CardHeaderContent>
                                <MudText>Add New Category</MudText>
                            </CardHeaderContent>

                        </MudCardHeader>
                        <MudCardContent>
                            <MudGrid>
                                <MudItem xs="6" md="6">
                                    <MudTextField T="string" @bind-Value="model.vchVal" Label="Abv" Margin="Margin.Normal"></MudTextField>
                                </MudItem>
                                <MudItem xs="6" md="6">
                                    <MudTextField T="string" @bind-Value="model.vchDesc" Label="Description" Margin="Margin.Normal"></MudTextField>
                                </MudItem>
                            </MudGrid>
                        </MudCardContent>
                        <MudCardActions Class="pb-4 pl-4">
                            <MudButton Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto" OnClick="@( () =>  Save())">Save</MudButton>
                            <MudButton Variant="Variant.Filled" Color="Color.Secondary" DisableElevation="true" OnClick="@(()=>form.Reset())" Class="mx-2">Reset</MudButton>
                            <MudButton Variant="Variant.Filled" DisableElevation="true" OnClick="@(()=> CatList())">Cancel</MudButton>
                        </MudCardActions>
                    </MudCard>
                </MudForm>
            </MudItem>
              <MudItem xs="12" sm="12" md="12">
            <MudTable Elevation="25" Items="categories" Filter="new Func<CategoryDTO, bool>(Search)" @bind-model="model">
                <ToolBarContent>
                    <MudText Typo="Typo.h6">Categories List</MudText>
                    <br />
                                 <MudTextField @bind-Value="searchString" Placeholder="Search for Categories..." Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
                </ToolBarContent>
                <HeaderContent>
                    <MudTh>Id</MudTh>
                    <MudTh>Abv</MudTh>
                    <MudTh>Description</MudTh>
                    <MudTh>Actions</MudTh>
                </HeaderContent>
                <RowTemplate>
                    <MudTd DataLabel="Id">@context.ID</MudTd>
                    <MudTd DataLabel="FirstName">@context.vchVal</MudTd>
                    <MudTd DataLabel="LastName">@context.vchDesc</MudTd>
                     <MudTd DataLabel="">
                        <MudFab @onclick="@(()=>Edit(@context.ID))" Color="Color.Primary" Icon="@Icons.Material.Filled.Edit" Size="Size.Small" IconSize="Size.Small" />
                        @*<MudFab @onclick="@(()=>Delete(@context.ID))" Color="Color.Secondary" Icon="@Icons.Material.Filled.Delete" Size="Size.Small" IconSize="Size.Small" />*@
                        </MudTd>
                </RowTemplate>
            </MudTable>
              </MudItem>
        </MudGrid>
    </MudTabPanel>

</MudTabs>

@code {
    MudForm form;
    private string searchString = "";
    CategoryDTO model = new CategoryDTO();
    List<CategoryDTO> categories = new List<CategoryDTO>();

    protected override async Task OnInitializedAsync()
    {
        await CatList();
    }
    private async Task CatList()
    {
        categories = await _catRepo.Get();

    }
    private bool Search(CategoryDTO cat)
    {

        if (string.IsNullOrWhiteSpace(searchString)) return true;
        if (cat.vchVal.Contains(searchString, StringComparison.OrdinalIgnoreCase)
            || cat.vchDesc.Contains(searchString, StringComparison.OrdinalIgnoreCase))
        {
            return true;
        }
        return false;

    }
    bool isField = false;
    private async Task Save()
    {
        ResponseModel  responseModel = new ResponseModel();
        if(model.ID>0)
        {
            responseModel = await _catRepo.Upate(model);
            if (responseModel.IsSuccess == true)
            {
                Snackbar.Add("Operation Performed Successfully!.", MudBlazor.Severity.Success);
               categories = new List<CategoryDTO>();
                OnInitializedAsync();
            }
            else
            {
                OnInitializedAsync();
                isField = true;
                Snackbar.Add("Something went wrong!.", MudBlazor.Severity.Warning);


            }
        }
        else
        {
            
       
        responseModel = await _catRepo.Add(model);
        if (responseModel.IsSuccess == true)
        {
            Snackbar.Add("Operation Performed Successfully!.", MudBlazor.Severity.Success);
            categories = new List<CategoryDTO>();
            OnInitializedAsync();
        }
        else
        {
            OnInitializedAsync();
            isField = true;
            Snackbar.Add("Something went wrong!.", MudBlazor.Severity.Warning);


        }
         }
    }
    private async Task Edit(int id)
    {
        model = await _catRepo.GetById(id);
    }
    private void Delete(int id)
    {
        //customerService.DeleteCustomer(id);
        //snackBar.Add("Customer Deleted.", Severity.Success);
        //GetCustomers();
    }
    



} 